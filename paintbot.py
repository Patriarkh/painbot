from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import logging
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
import asyncio
import os
from dotenv import load_dotenv
from db import get_user, add_user, users_collection
from image_generator import generate_image
from telegram import ReplyKeyboardMarkup, KeyboardButton

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_API = os.getenv("TELEGRAM_API")
MONGO_LINK = os.getenv("MONGO_LINK")
MONGO_DB = os.getenv("MONGO_DB")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

free_generations = 10

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def broadcast_message(context: ContextTypes.DEFAULT_TYPE, message_text: str):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = users_collection.find({})
    for user in users:
        chat_id = user["chat_id"]
        try:
            await context.bot.send_message(chat_id=chat_id, text=message_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id {chat_id}: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ /broadcast –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–º–∏
    if update.effective_user.id == 380441767:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
        if context.args:
            message_text = " ".join(context.args)
            await broadcast_message(context, message_text)
            await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def check(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id=chat_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user = get_user(chat_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name or ""
        username = update.effective_user.username or ""
        add_user(first_name, last_name, username, chat_id, free_generations=10)

     # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å file_id –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∫ –ø–µ—Ä–≤–æ–π
    photo_ids = ["AgACAgIAAxkBAAID2Wcwbx45V3ku3odBV5SZBXvvUshaAAKt5jEbdLyBSZjgoH7EyUbEAQADAgADeQADNgQ", "AgACAgIAAxkBAAID3mcwb7GSbUDsAAEzThdcZYBHdPqpawACruYxG3S8gUm0KZXpn7fleAEAAwIAA3kAAzYE", "AgACAgIAAxkBAAID4Gcwb7e1FGA3aencSpw4mSBGdQABxQACr-YxG3S8gUmwmt7jc_AtdwEAAwIAA3kAAzYE", "AgACAgIAAxkBAAID5Gcwb8MJ3xUm2PaHUUYVYgUPePJ-AAKx5jEbdLyBSbx7ATY0r0vZAQADAgADeAADNgQ", "AgACAgIAAxkBAAID4mcwb71ovBizHHpZioLxyNTvObl3AAKw5jEbdLyBSay-7pz-jf1GAQADAgADeQADNgQ", "AgACAgIAAxkBAAID5mcwb9wiDWK_pv36-N3FV09oGWT_AAKy5jEbdLyBSeoFfLQCIH5XAQADAgADeQADNgQ"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ file_id
    media_group = [
        InputMediaPhoto(photo_ids[0], caption="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä–∞—Å–æ–∫. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –¥–∞—Ä—é —Ç–µ–±–µ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π."),
        InputMediaPhoto(photo_ids[1]),
        InputMediaPhoto(photo_ids[2]),
        InputMediaPhoto(photo_ids[3]),
        InputMediaPhoto(photo_ids[4]),
        InputMediaPhoto(photo_ids[5])
    ]
       # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º
    await context.bot.send_media_group(chat_id=chat_id, media=media_group)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫—Ä–∞—Å–∫—É" –∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
    keyboard = [
        [KeyboardButton("üé® –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫—Ä–∞—Å–∫—É"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å–∫—Ä–∞—Å–æ–∫ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–¥–µ—Ä–∂–∫–∞\" –Ω–∏–∂–µ.\n\n–ù–∞–∂–º–∏ \"–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫—Ä–∞—Å–∫—É\", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!", reply_markup=reply_markup)
    
  

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
async def support_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí¨ –ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n"
        "–¢–µ–ª–µ–≥—Ä–∞–º: @nikiraikov"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫—Ä–∞—Å–∫—É"
async def handle_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)

    if user is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    if user["free_generations"] > 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:")
        context.user_data['waiting_for_description'] = True
    else:
        await update.message.reply_text(
            "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å–∫—Ä–∞—Å–æ–∫, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–∂–∞–≤ ""–ü–æ–¥–¥–µ—Ä–∂–∫–∞"" –≤–Ω–∏–∑—É"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫—Ä–∞—Å–∫—É"
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)

    if context.user_data.get('waiting_for_description') and user["free_generations"] > 0:
        context.user_data['waiting_for_description'] = False
        request_text = update.message.text
        context.args = [request_text]  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        request_id = uuid.uuid4()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
        await generate_image(update, context, request_id)
        logger.info(f"[{request_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
    else:
        await update.message.reply_text(
            "–í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å–∫—Ä–∞—Å–æ–∫, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–∂–∞–≤ ""–ü–æ–¥–¥–µ—Ä–∂–∫–∞"" –≤–Ω–∏–∑—É"
        )




def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TELEGRAM_API).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler('check', check))
    application.add_handler(CommandHandler("broadcast", broadcast_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫—Ä–∞—Å–∫—É" –≤ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    application.add_handler(MessageHandler(filters.Regex("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫—Ä–∞—Å–∫—É"), handle_reply_button))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
    application.add_handler(MessageHandler(filters.Regex("–ü–æ–¥–¥–µ—Ä–∂–∫–∞"), support_handler))
    

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    

    
    # –ó–∞–ø—É—Å–∫ polling (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –±–µ–∑ await)
    application.run_polling()

if __name__ == "__main__":
    main()
